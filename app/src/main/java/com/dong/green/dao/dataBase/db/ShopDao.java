package com.dong.green.dao.dataBase.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.dong.green.dao.dataBase.bean.Shop;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP".
*/
public class ShopDao extends AbstractDao<Shop, Long> {

    public static final String TABLENAME = "SHOP";

    /**
     * Properties of entity Shop.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Shop_name = new Property(1, String.class, "shop_name", false, "SHOP_NAME");
        public final static Property Shop_code = new Property(2, String.class, "shop_code", false, "SHOP_CODE");
        public final static Property Shop_price = new Property(3, String.class, "shop_price", false, "SHOP_PRICE");
        public final static Property Shop_number = new Property(4, int.class, "shop_number", false, "SHOP_NUMBER");
        public final static Property ShopIdForOrder = new Property(5, Long.class, "shopIdForOrder", false, "SHOP_ID_FOR_ORDER");
    }

    private Query<Shop> order_ShopsListQuery;

    public ShopDao(DaoConfig config) {
        super(config);
    }
    
    public ShopDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SHOP_NAME\" TEXT," + // 1: shop_name
                "\"SHOP_CODE\" TEXT," + // 2: shop_code
                "\"SHOP_PRICE\" TEXT," + // 3: shop_price
                "\"SHOP_NUMBER\" INTEGER NOT NULL ," + // 4: shop_number
                "\"SHOP_ID_FOR_ORDER\" INTEGER);"); // 5: shopIdForOrder
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Shop entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String shop_name = entity.getShop_name();
        if (shop_name != null) {
            stmt.bindString(2, shop_name);
        }
 
        String shop_code = entity.getShop_code();
        if (shop_code != null) {
            stmt.bindString(3, shop_code);
        }
 
        String shop_price = entity.getShop_price();
        if (shop_price != null) {
            stmt.bindString(4, shop_price);
        }
        stmt.bindLong(5, entity.getShop_number());
 
        Long shopIdForOrder = entity.getShopIdForOrder();
        if (shopIdForOrder != null) {
            stmt.bindLong(6, shopIdForOrder);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Shop entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String shop_name = entity.getShop_name();
        if (shop_name != null) {
            stmt.bindString(2, shop_name);
        }
 
        String shop_code = entity.getShop_code();
        if (shop_code != null) {
            stmt.bindString(3, shop_code);
        }
 
        String shop_price = entity.getShop_price();
        if (shop_price != null) {
            stmt.bindString(4, shop_price);
        }
        stmt.bindLong(5, entity.getShop_number());
 
        Long shopIdForOrder = entity.getShopIdForOrder();
        if (shopIdForOrder != null) {
            stmt.bindLong(6, shopIdForOrder);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Shop readEntity(Cursor cursor, int offset) {
        Shop entity = new Shop( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shop_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shop_code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shop_price
            cursor.getInt(offset + 4), // shop_number
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // shopIdForOrder
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Shop entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShop_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShop_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShop_price(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShop_number(cursor.getInt(offset + 4));
        entity.setShopIdForOrder(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Shop entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Shop entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Shop entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "shopsList" to-many relationship of Order. */
    public List<Shop> _queryOrder_ShopsList(Long shopIdForOrder) {
        synchronized (this) {
            if (order_ShopsListQuery == null) {
                QueryBuilder<Shop> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ShopIdForOrder.eq(null));
                order_ShopsListQuery = queryBuilder.build();
            }
        }
        Query<Shop> query = order_ShopsListQuery.forCurrentThread();
        query.setParameter(0, shopIdForOrder);
        return query.list();
    }

}
